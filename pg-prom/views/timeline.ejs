<html>
<meta charset="UTF-8">
<script src="http://code.jquery.com/jquery-1.6.2.min.js"></script>
<script src="//d3js.org/d3.v3.min.js"></script>
<script type="text/javascript">
    $(function () {
        $('#select_link').click(function (e) {
            e.preventDefault();
            console.log('select_link clicked');

            function test(data) {
                return { "message": "OK" };
            }

            $.ajax({
                dataType: 'json',
                json: 'callback',
                url: 'http://localhost:8000/all',
                success: function (data) {
                    console.log(JSON.stringify(data));
                    return data;
                }
            });
        });
    });
</script>
<style>

    .barGraph:hover .num {
        display:block;
    }

    .barGraph:hover .year {
        display:block;
    }

    .bar{
        fill: steelblue;
    }

    .bar:hover{
        fill: brown;
    }

    .num {
        display: none;
    }

    .year {
        display: none;
     }

    .axis {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

</style>
</head>

<body>

    <script>
    // Adapted from http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/

    var randomColor = (function(){
      var golden_ratio_conjugate = 0.618033988749895;
      var h = Math.random();

      var hslToRgb = function (h, s, l){
          var r, g, b;

          if(s == 0){
              r = g = b = l; // achromatic
          }else{
              function hue2rgb(p, q, t){
                  if(t < 0) t += 1;
                  if(t > 1) t -= 1;
                  if(t < 1/6) return p + (q - p) * 6 * t;
                  if(t < 1/2) return q;
                  if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                  return p;
              }

              var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
              var p = 2 * l - q;
              r = hue2rgb(p, q, h + 1/3);
              g = hue2rgb(p, q, h);
              b = hue2rgb(p, q, h - 1/3);
          }

          return '#'+Math.round(r * 255).toString(16)+Math.round(g * 255).toString(16)+Math.round(b * 255).toString(16);
      };

      return function(){
        h += golden_ratio_conjugate;
        h %= 1;
        return hslToRgb(h, 0.5, 0.60);
      };
    })();
    </script>

    <script>
        var graphdata = [];

        var margin = { top: 20, right: 20, bottom: 100, left: 100 },
            width = 1280 - margin.left - margin.right,
            height = 1020 - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .005);
    
        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(10);

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        $.ajax({
            dataType: 'json',
            json: 'callback',
            url: 'http://localhost:8000/all',
            success: function (data) {
                console.log("success");
                draw_graph(data);
            }
        });

        function draw_graph(data) {
           /* 
            data = $(data).filter(function (i, n) {
                return n.year === 2016;
            });
*/
            for (var d = 0; d < data.length; d++) {
                console.log(data[d].destination, data[d].refugees, data[d].year);

            }
            //             console.log(data);
            //             if (err) throw err;

            x.domain(data.map(function (d) { return d.destination; }));
            y.domain([0, d3.max(data, function (d) { return d.refugees; })]);

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
            .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 5)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Refugees admitted");

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
            .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", "-.55em")
                .attr("transform", "rotate(-90)")
                .style("color", "red")

            var g = svg.selectAll(".bar")
                .data(data)
            .enter().append("g")
                .attr("class", "barGraph")
                g.append("rect")
                    .attr("class", "bar")
                    .attr("x", function (d) { return x(d.destination); })
                    .attr("y", function (d) { return y(d.refugees); })
                    //.attr("width", function(d) { return 10;})
                    .attr("width", function(d) { return x.rangeBand();})
                    .attr("height", function (d) { return height - y(d.refugees); })
                    .style({fill: randomColor})
                
                g.append("text")
                    .attr("class", "year")
                    .attr("x", function (d) { return x(d.destination); })
                    .attr("y", function (d) { return y(d.refugees); })
                    .text(function(d){return d.year});

                g.append("text")
                    .attr("class", "num")
                    .attr("x", function (d) { return x(d.destination); })
                    .attr("y", function (d) { return y(d.refugees) +25; })
                    .text(function(d){return d.refugees});
        };
    </script>
</body>


<style>
</style>
